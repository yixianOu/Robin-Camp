// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.9.0
// - protoc             v6.32.1
// source: movie/v1/movie.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationMovieServiceCreateMovie = "/api.movie.v1.MovieService/CreateMovie"
const OperationMovieServiceGetRating = "/api.movie.v1.MovieService/GetRating"
const OperationMovieServiceHealthCheck = "/api.movie.v1.MovieService/HealthCheck"
const OperationMovieServiceListMovies = "/api.movie.v1.MovieService/ListMovies"
const OperationMovieServiceSubmitRating = "/api.movie.v1.MovieService/SubmitRating"

type MovieServiceHTTPServer interface {
	// CreateMovie Create a new movie
	CreateMovie(context.Context, *CreateMovieRequest) (*CreateMovieReply, error)
	// GetRating Get aggregated rating for a movie
	GetRating(context.Context, *GetRatingRequest) (*GetRatingReply, error)
	// HealthCheck Health check
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckReply, error)
	// ListMovies List movies with filters and pagination
	ListMovies(context.Context, *ListMoviesRequest) (*ListMoviesReply, error)
	// SubmitRating Submit or update a rating for a movie
	SubmitRating(context.Context, *SubmitRatingRequest) (*SubmitRatingReply, error)
}

func RegisterMovieServiceHTTPServer(s *http.Server, srv MovieServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/movies", _MovieService_CreateMovie0_HTTP_Handler(srv))
	r.GET("/movies", _MovieService_ListMovies0_HTTP_Handler(srv))
	r.POST("/movies/{title}/ratings", _MovieService_SubmitRating0_HTTP_Handler(srv))
	r.GET("/movies/{title}/rating", _MovieService_GetRating0_HTTP_Handler(srv))
	r.GET("/healthz", _MovieService_HealthCheck0_HTTP_Handler(srv))
}

func _MovieService_CreateMovie0_HTTP_Handler(srv MovieServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateMovieRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMovieServiceCreateMovie)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateMovie(ctx, req.(*CreateMovieRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateMovieReply)
		return ctx.Result(200, reply)
	}
}

func _MovieService_ListMovies0_HTTP_Handler(srv MovieServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListMoviesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMovieServiceListMovies)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListMovies(ctx, req.(*ListMoviesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListMoviesReply)
		return ctx.Result(200, reply)
	}
}

func _MovieService_SubmitRating0_HTTP_Handler(srv MovieServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SubmitRatingRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMovieServiceSubmitRating)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SubmitRating(ctx, req.(*SubmitRatingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SubmitRatingReply)
		return ctx.Result(200, reply)
	}
}

func _MovieService_GetRating0_HTTP_Handler(srv MovieServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRatingRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMovieServiceGetRating)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRating(ctx, req.(*GetRatingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetRatingReply)
		return ctx.Result(200, reply)
	}
}

func _MovieService_HealthCheck0_HTTP_Handler(srv MovieServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HealthCheckRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMovieServiceHealthCheck)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HealthCheck(ctx, req.(*HealthCheckRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HealthCheckReply)
		return ctx.Result(200, reply)
	}
}

type MovieServiceHTTPClient interface {
	// CreateMovie Create a new movie
	CreateMovie(ctx context.Context, req *CreateMovieRequest, opts ...http.CallOption) (rsp *CreateMovieReply, err error)
	// GetRating Get aggregated rating for a movie
	GetRating(ctx context.Context, req *GetRatingRequest, opts ...http.CallOption) (rsp *GetRatingReply, err error)
	// HealthCheck Health check
	HealthCheck(ctx context.Context, req *HealthCheckRequest, opts ...http.CallOption) (rsp *HealthCheckReply, err error)
	// ListMovies List movies with filters and pagination
	ListMovies(ctx context.Context, req *ListMoviesRequest, opts ...http.CallOption) (rsp *ListMoviesReply, err error)
	// SubmitRating Submit or update a rating for a movie
	SubmitRating(ctx context.Context, req *SubmitRatingRequest, opts ...http.CallOption) (rsp *SubmitRatingReply, err error)
}

type MovieServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewMovieServiceHTTPClient(client *http.Client) MovieServiceHTTPClient {
	return &MovieServiceHTTPClientImpl{client}
}

// CreateMovie Create a new movie
func (c *MovieServiceHTTPClientImpl) CreateMovie(ctx context.Context, in *CreateMovieRequest, opts ...http.CallOption) (*CreateMovieReply, error) {
	var out CreateMovieReply
	pattern := "/movies"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMovieServiceCreateMovie))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// GetRating Get aggregated rating for a movie
func (c *MovieServiceHTTPClientImpl) GetRating(ctx context.Context, in *GetRatingRequest, opts ...http.CallOption) (*GetRatingReply, error) {
	var out GetRatingReply
	pattern := "/movies/{title}/rating"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMovieServiceGetRating))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// HealthCheck Health check
func (c *MovieServiceHTTPClientImpl) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...http.CallOption) (*HealthCheckReply, error) {
	var out HealthCheckReply
	pattern := "/healthz"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMovieServiceHealthCheck))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ListMovies List movies with filters and pagination
func (c *MovieServiceHTTPClientImpl) ListMovies(ctx context.Context, in *ListMoviesRequest, opts ...http.CallOption) (*ListMoviesReply, error) {
	var out ListMoviesReply
	pattern := "/movies"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMovieServiceListMovies))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// SubmitRating Submit or update a rating for a movie
func (c *MovieServiceHTTPClientImpl) SubmitRating(ctx context.Context, in *SubmitRatingRequest, opts ...http.CallOption) (*SubmitRatingReply, error) {
	var out SubmitRatingReply
	pattern := "/movies/{title}/ratings"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMovieServiceSubmitRating))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
